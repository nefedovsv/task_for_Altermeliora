{"version":3,"sources":["components/FormContainer/Form.module.css","components/LanguageContainer/Language.module.css","interfaces/interface.ts","components/FormContainer/LogForm.tsx","actions/logIn.ts","utils/constants.ts","actions/signUp.ts","i18n.ts","utils/helpers.ts","actions/action.ts","actions/loaded.ts","reducers/authorize.ts","reducers/rootReducer.ts","store/store.ts","index.tsx","components/LanguageContainer/LanguageElement.tsx"],"names":["module","exports","Language","LoginForm","Form","create","name","form","React","login","setLogStatus","dispatch","useDispatch","isLoaded","useSelector","store","formReducer","getFieldDecorator","t","useTranslation","className","styles","body","onSubmit","e","button","document","getElementById","preventDefault","validateFields","err","values","text","innerText","type","payload","data","signUp","Item","hasFeedback","rules","required","message","placeholder","disabled","min","Password","validator","rule","value","callback","getFieldValue","whitespace","htmlType","id","onClick","i18n","use","LanguageDetector","init","resources","ENG","translations","logIn","unRegistered","registered","RUS","fallbackLng","ns","defaultNS","interpolation","escapeValue","getStore","state","selectUser","users","filter","item","email","password","delay","ms","Promise","res","setTimeout","makeSuccessMsg","success","makeErrorMsg","Saga","signUpSaga","logInSaga","takeEvery","action","select","sameUser","length","call","put","user","initialState","combineReducers","currentUser","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","logger","run","rootSaga","render","Group","Radio","Button","onChange","changeLanguage","target","defaultValue","size"],"mappings":"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","file":"static/js/main.0e6e670a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Form_body__4KAbD\",\"form\":\"Form_form__2G91D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Language_body__2gy5H\"};","export interface IUser {\r\n  email: string;\r\n  password: string;\r\n  name?: string;\r\n}\r\n\r\nexport interface IState {\r\n  currentUser?: IUser | null;\r\n  users: IUser[] | [];\r\n  isLoaded: boolean;\r\n}\r\n\r\nexport enum Language {\r\n  ENG = \"ENG\",\r\n  RUS = \"RUS\"\r\n}\r\n","import * as React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { FormComponentProps } from \"antd/es/form\";\r\nimport { logIn } from \"../../actions/logIn\";\r\nimport { signUp } from \"../../actions/signUp\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./Form.module.css\";\r\nimport { Dispatch } from \"redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\ninterface ILogForm extends FormComponentProps {}\r\n\r\nconst LogForm: React.FC<ILogForm> = ({ form }) => {\r\n  const [login, setLogStatus] = React.useState<boolean>(true);\r\n  const dispatch: Dispatch = useDispatch();\r\n  const { isLoaded } = useSelector((store: any) => store.formReducer);\r\n  const { getFieldDecorator } = form;\r\n  const { t } = useTranslation();\r\n\r\n  const checkPassword = (rule: any, value: any, callback: () => void) => {\r\n    if (value && value !== form.getFieldValue(\"password\")) {\r\n      //@ts-ignore\r\n      callback(\"Two passwords does not equal!\");\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    const button = document.getElementById(\"submit\");\r\n\r\n    e.preventDefault();\r\n    form.validateFields((err, values) => {\r\n      if (!err && button) {\r\n        const text = button.innerText;\r\n        text === \"Log in\" || text === \"Авторизация\"\r\n          ? dispatch(logIn(values))\r\n          : dispatch(signUp(values));\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.body}>\r\n      <h4>{login ? t(\"logIn\") : t(\"signUp\")}</h4>\r\n      <Form className={styles.form} onSubmit={handleSubmit}>\r\n        <Form.Item hasFeedback>\r\n          {getFieldDecorator(\"email\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                type: \"email\",\r\n                message: \"Please use correct e-mail!\"\r\n              }\r\n            ]\r\n          })(\r\n            <Input\r\n              placeholder=\"Please enter your e-mail\"\r\n              disabled={!isLoaded}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item hasFeedback>\r\n          {getFieldDecorator(\"password\", {\r\n            rules: [\r\n              { required: true, message: \"Please input your password!\" },\r\n              { min: 6 }\r\n            ]\r\n          })(\r\n            <Input.Password\r\n              placeholder=\"Please enter your password\"\r\n              disabled={!isLoaded}\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        {!login && (\r\n          <Form.Item hasFeedback>\r\n            {getFieldDecorator(\"confirm\", {\r\n              rules: [\r\n                { required: true, message: \"Please confirm your password!\" },\r\n                { validator: checkPassword }\r\n              ]\r\n            })(\r\n              <Input.Password\r\n                placeholder=\"Please confirm your password\"\r\n                disabled={!isLoaded}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        )}\r\n        {!login && (\r\n          <Form.Item>\r\n            {getFieldDecorator(\"name\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your name!\",\r\n                  whitespace: true\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                placeholder=\"Please enter your name\"\r\n                disabled={!isLoaded}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        )}\r\n        <Button\r\n          htmlType=\"submit\"\r\n          type=\"primary\"\r\n          id=\"submit\"\r\n          disabled={!isLoaded}\r\n        >\r\n          {login ? t(\"logIn\") : t(\"signUp\")}\r\n        </Button>\r\n        <h4>{login ? t(\"unRegistered\") : t(\"registered\")}</h4>\r\n        <Button\r\n          type=\"primary\"\r\n          disabled={!isLoaded}\r\n          onClick={() => setLogStatus(!login)}\r\n        >\r\n          {login ? t(\"signUp\") : t(\"logIn\")}\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const LoginForm = Form.create<ILogForm>({ name: \"log\" })(LogForm);\r\n","import { IUser } from \"../interfaces/interface\";\r\nimport { LOG_IN, LOG_IN_SAGA } from \"../utils/constants\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface ILogInAction extends Action<any> {\r\n  payload: IUser;\r\n}\r\n\r\nexport function logIn(data: IUser): ILogInAction {\r\n  return {\r\n    type: LOG_IN,\r\n    payload: data\r\n  };\r\n}\r\n\r\nexport function logFromSaga(data: IUser): ILogInAction {\r\n  return {\r\n    type: LOG_IN_SAGA,\r\n    payload: data\r\n  };\r\n}\r\n","export const LOG_IN: string = \"LOG_IN\";\r\nexport const SIGN_UP: string = \"SIGN_UP\";\r\nexport const LOG_IN_SAGA: string = \"LOG_IN_SAGA\";\r\nexport const SIGN_UP_SAGA: string = \"SIGN_UP_SAGA\";\r\nexport const LOADED: string = \"LOADED\";\r\n","import { IUser } from \"../interfaces/interface\";\r\nimport { SIGN_UP, SIGN_UP_SAGA } from \"../utils/constants\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface ISignUpAction extends Action<any> {\r\n  payload: IUser;\r\n}\r\n\r\nexport function signUp(data: IUser): ISignUpAction {\r\n  return {\r\n    type: SIGN_UP,\r\n    payload: data\r\n  };\r\n}\r\n\r\nexport function signFromSaga(data: IUser): ISignUpAction {\r\n  return {\r\n    type: SIGN_UP_SAGA,\r\n    payload: data\r\n  };\r\n}\r\n","import i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\ni18n.use(LanguageDetector).init({\n  resources: {\n    ENG: {\n      translations: {\n        logIn: \"Log in\",\n        signUp: \"Sign Up\",\n        unRegistered: \"Are you here for the first time?\",\n        registered: \"Already registration?\"\n      }\n    },\n    RUS: {\n      translations: {\n        logIn: \"Авторизация\",\n        signUp: \"Регистрация\",\n        unRegistered: \"Вы здесь в первый раз?\",\n        registered: \"Уже регистрировались?\"\n      }\n    }\n  },\n  fallbackLng: \"ENG\",\n\n  ns: [\"translations\"],\n  defaultNS: \"translations\",\n\n  interpolation: {\n    escapeValue: false // not needed for react!!\n  }\n});\n\nexport default i18n;\n","import { IState, IUser } from \"../interfaces/interface\";\r\nimport { message } from \"antd\";\r\n\r\nexport const getStore = (state: any) => state.formReducer;\r\n\r\nexport const selectUser = (state: IState, data: IUser) => {\r\n  const user = state.users.filter(\r\n    (item: IUser) =>\r\n      item.email === data.email && item.password === data.password\r\n  );\r\n  return user;\r\n};\r\n\r\nexport const delay = (ms: number) => new Promise(res => setTimeout(res, ms));\r\n\r\nexport const makeSuccessMsg = (): void => {\r\n  message.success(\"You was register!\");\r\n};\r\n\r\nexport const makeErrorMsg = (): void => {\r\n  message.success(\"Something went wrong\");\r\n};\r\n","import { LOG_IN, SIGN_UP } from \"../utils/constants\";\r\nimport { ISignUpAction, signFromSaga } from \"./signUp\";\r\nimport { ILogInAction, logFromSaga } from \"./logIn\";\r\nimport { SagaIterator } from \"@redux-saga/core\";\r\nimport { fork, call, takeEvery, select, put } from \"redux-saga/effects\";\r\nimport { IState, IUser } from \"../interfaces/interface\";\r\nimport {\r\n  delay,\r\n  getStore,\r\n  makeErrorMsg,\r\n  makeSuccessMsg,\r\n  selectUser\r\n} from \"../utils/helpers\";\r\nimport { loaded } from \"./loaded\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction* rootSaga(): SagaIterator {\r\n  yield fork(Saga);\r\n}\r\n\r\nexport default function* Saga() {\r\n  yield takeEvery(LOG_IN, logInSaga);\r\n  yield takeEvery(SIGN_UP, signUpSaga);\r\n}\r\n\r\nexport function* signUpSaga(action: ISignUpAction) {\r\n  const state: IState = yield select(getStore);\r\n\r\n  const sameUser: IUser[] = selectUser(state, action.payload);\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n    if (sameUser.length >= 1) {\r\n      yield call(makeSuccessMsg);\r\n      yield put(loaded());\r\n    } else {\r\n      yield put(signFromSaga(action.payload));\r\n      yield call(makeSuccessMsg);\r\n    }\r\n  } catch (e) {\r\n    yield call(makeErrorMsg);\r\n  }\r\n}\r\n\r\nexport function* logInSaga(action: ILogInAction) {\r\n  const state: IState = yield select(getStore);\r\n\r\n  const user: IUser[] = selectUser(state, action.payload);\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n    if (user.length) {\r\n      yield put(logFromSaga(user[0]));\r\n      yield call(makeSuccessMsg);\r\n    } else {\r\n      yield put(loaded());\r\n      yield call(makeErrorMsg);\r\n    }\r\n  } catch (e) {\r\n    yield call(makeErrorMsg);\r\n  }\r\n}\r\n","import { LOADED } from \"../utils/constants\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface ILoadWithError extends Action<typeof LOADED> {\r\n  payload: null;\r\n}\r\n\r\nexport function loaded(): ILoadWithError {\r\n  return {\r\n    type: LOADED,\r\n    payload: null\r\n  };\r\n}\r\n","import { IState } from \"../interfaces/interface\";\r\nimport {\r\n  LOADED,\r\n  LOG_IN,\r\n  LOG_IN_SAGA,\r\n  SIGN_UP,\r\n  SIGN_UP_SAGA\r\n} from \"../utils/constants\";\r\nimport { ILogInAction } from \"../actions/logIn\";\r\nimport { ISignUpAction } from \"../actions/signUp\";\r\nimport { ILoadWithError } from \"../actions/loaded\";\r\n\r\nconst initialState: IState = {\r\n  users: [],\r\n  isLoaded: true\r\n};\r\n\r\nexport function formReducer(\r\n  state: IState = initialState,\r\n  action: ILogInAction | ISignUpAction | ILoadWithError\r\n) {\r\n  switch (action.type) {\r\n    case LOG_IN:\r\n      return {\r\n        ...state,\r\n        isLoaded: false\r\n      };\r\n    case LOG_IN_SAGA:\r\n      return {\r\n        ...state,\r\n        isLoaded: true,\r\n        currentUser: action.payload\r\n      };\r\n    case SIGN_UP:\r\n      return {\r\n        ...state,\r\n        isLoaded: false\r\n      };\r\n    case SIGN_UP_SAGA:\r\n      return {\r\n        ...state,\r\n        users: [...state.users, action.payload],\r\n        isLoaded: true,\r\n        currentUser: action.payload\r\n      };\r\n    case LOADED:\r\n      return {\r\n        ...state,\r\n        isLoaded: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { formReducer } from \"./authorize\";\r\n\r\nexport default combineReducers({\r\n  formReducer\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../actions/action\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(sagaMiddleware, logger)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { LoginForm } from \"./components/FormContainer/LogForm\";\r\nimport { LanguageElement } from \"./components/LanguageContainer/LanguageElement\";\r\nimport { Provider } from \"react-redux\";\r\nimport { I18nextProvider } from \"react-i18next\";\r\nimport i18n from \"./i18n\";\r\nimport { store } from \"./store/store\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <I18nextProvider i18n={i18n}>\r\n      <LanguageElement />\r\n      <LoginForm />\r\n    </I18nextProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\nimport { useTranslation } from \"react-i18next\";\nimport { Language } from \"../../interfaces/interface\";\nimport styles from \"./Language.module.css\";\n\nexport const LanguageElement: React.FC<{}> = () => {\n  const { Group, Button } = Radio;\n\n  const { i18n } = useTranslation();\n\n  const onChange = (e: RadioChangeEvent): void => {\n    i18n.changeLanguage(e.target.value);\n  };\n\n  return (\n    <div className={styles.body}>\n      <Group onChange={onChange} defaultValue={Language.ENG} size=\"small\">\n        <Button value={Language.ENG}>{Language.ENG}</Button>\n        <Button value={Language.RUS}>{Language.RUS}</Button>\n      </Group>\n    </div>\n  );\n};\n"],"sourceRoot":""}