{"version":3,"sources":["components/FormContainer/Form.module.css","components/LanguageContainer/Language.module.css","interfaces/interface.ts","components/FormContainer/LogForm.tsx","actions/logIn.ts","utils/constants.ts","actions/signUp.ts","i18n.ts","utils/helpers.ts","actions/action.ts","actions/loaded.ts","reducers/authorize.ts","reducers/rootReducer.ts","store/store.ts","index.tsx","components/LanguageContainer/LanguageElement.tsx","components/FormContainer/LogFormContainer.tsx"],"names":["module","exports","Language","Form","create","name","dispatch","setLogStatus","login","form","isLoaded","useSelector","store","formReducer","getFieldDecorator","t","useTranslation","className","styles","body","onSubmit","e","button","document","getElementById","preventDefault","validateFields","err","values","text","innerText","type","payload","data","signUp","Item","hasFeedback","rules","required","message","placeholder","disabled","min","Password","validator","rule","value","callback","getFieldValue","whitespace","htmlType","id","onClick","i18n","use","LanguageDetector","init","resources","ENG","translations","logIn","unRegistered","registered","RUS","fallbackLng","ns","defaultNS","interpolation","escapeValue","getStore","state","selectUser","users","filter","item","email","password","delay","ms","Promise","res","setTimeout","makeSuccessMsg","success","makeErrorMsg","Saga","signUpSaga","logInSaga","takeEvery","action","select","sameUser","length","call","put","user","initialState","combineReducers","currentUser","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","logger","run","rootSaga","render","Group","Radio","Button","onChange","changeLanguage","target","defaultValue","size","useDispatch","useState","logFormProps"],"mappings":"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","file":"static/js/main.65da00aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Form_body__paaWK\",\"form\":\"Form_form__1my_U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Language_body__2kRcX\"};","export interface IUser {\r\n\temail: string;\r\n\tpassword: string;\r\n\tname?: string;\r\n}\r\n\r\nexport interface IState {\r\n\tcurrentUser?: IUser | null;\r\n\tusers: IUser[] | [];\r\n\tisLoaded: boolean;\r\n}\r\n\r\nexport enum Language {\r\n\tENG = 'ENG',\r\n\tRUS = 'RUS',\r\n}\r\n","import * as React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Form, Input, Button } from 'antd';\nimport { FormComponentProps } from 'antd/es/form';\nimport {IProps} from \"./LogFormContainer\";\nimport {logIn} from \"../../actions/logIn\";\nimport {signUp} from \"../../actions/signUp\";\nimport { useTranslation } from 'react-i18next';\nimport styles from \"./Form.module.css\";\n\ninterface ILogForm extends IProps, FormComponentProps {}\n\n\nconst LogForm: React.FC<ILogForm> = ({ dispatch, setLogStatus, login, form } ) => {\n\n\tconst {isLoaded} = useSelector((store: any) => store.formReducer);\n\tconst { getFieldDecorator } = form;\n\tconst { t } = useTranslation();\n\n\tconst checkPassword = (rule: any, value: any, callback: () => void) => {\n\t\tif (value && value !== form.getFieldValue('password')) {\n\t\t\t//@ts-ignore\n\t\t\tcallback('Two passwords does not equal!');\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t};\n\n\tconst handleSubmit = (e:any) => {\n\t\tconst button = document.getElementById('submit');\n\n\t\te.preventDefault();\n\t\tform.validateFields((err, values) => {\n\t\t\tif (!err && button) {\n\t\t\t\tconst text = button.innerText;\n\t\t\t\t((text === 'Log in') || (text === 'Авторизация'))? dispatch(logIn(values)): dispatch(signUp(values))\n\t\t\t};\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className={styles.body}>\n\t\t\t<h4>{login ? t('logIn') : t('signUp')}</h4>\n\t\t\t<Form className={styles.form} onSubmit={handleSubmit}>\n\t\t\t\t<Form.Item hasFeedback>\n\t\t\t\t\t{getFieldDecorator('email', {\n\t\t\t\t\t\trules: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\ttype: 'email',\n\t\t\t\t\t\t\t\tmessage: 'Please use correct e-mail!',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t})(\n\t\t\t\t\t\t<Input placeholder=\"Please enter your e-mail\" disabled={!isLoaded}/>,\n\t\t\t\t\t)}\n\t\t\t\t</Form.Item>\n\t\t\t\t<Form.Item hasFeedback>\n\t\t\t\t\t{getFieldDecorator('password', {\n\t\t\t\t\t\trules: [\n\t\t\t\t\t\t\t{ required: true, message: 'Please input your password!' },\n\t\t\t\t\t\t\t{ min: 6 },\n\t\t\t\t\t\t],\n\t\t\t\t\t})(\n\t\t\t\t\t\t<Input.Password placeholder=\"Please enter your password\"  disabled={!isLoaded}/>,\n\t\t\t\t\t)}\n\t\t\t\t</Form.Item>\n\t\t\t\t{!login &&\n\t\t\t\t<Form.Item hasFeedback>\n\t\t\t\t\t{getFieldDecorator('confirm', {\n\t\t\t\t\t\trules: [\n\t\t\t\t\t\t\t{ required: true, message: 'Please confirm your password!' },\n\t\t\t\t\t\t\t{ validator: checkPassword },\n\t\t\t\t\t\t],\n\t\t\t\t\t})(<Input.Password placeholder=\"Please confirm your password\"  disabled={!isLoaded}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t}\n\t\t\t\t{!login &&\n\t\t\t\t<Form.Item>\n\t\t\t\t\t{getFieldDecorator('name', {\n\t\t\t\t\t\trules: [{ required: true, message: 'Please input your name!', whitespace: true }],\n\t\t\t\t\t})(<Input placeholder=\"Please enter your name\" disabled={!isLoaded}/>)}\n\t\t\t\t</Form.Item>\n\t\t\t\t}\n\t\t\t\t<Button\n\t\t\t\t\thtmlType=\"submit\"\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tid = \"submit\"\n\t\t\t\t\tdisabled={!isLoaded}\n\t\t\t\t>\n\t\t\t\t\t{login ? t('logIn') : t('signUp')}\n\t\t\t\t</Button>\n\t\t\t\t<h4>{login ? t('unRegistered') : t('registered')}</h4>\n\t\t\t\t<Button\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tdisabled={!isLoaded}\n\t\t\t\t\tonClick={() => setLogStatus(!login)}\n\t\t\t\t>\n\t\t\t\t\t{login ? t('signUp') : t('logIn')}\n\t\t\t\t</Button>\n\t\t\t</Form>\n\t\t</div>\n\t);\n};\n\nexport default Form.create<ILogForm>({ name: 'log' })(LogForm);\n","import {IUser} from \"../interfaces/interface\";\r\nimport {LOG_IN, LOG_IN_SAGA} from \"../utils/constants\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface ILogInAction extends Action<any> {\r\n\tpayload: IUser;\r\n}\r\n\r\nexport function logIn(data: IUser): ILogInAction {\r\n\treturn {\r\n\t\ttype: LOG_IN,\r\n\t\tpayload: data\r\n\t};\r\n}\r\n\r\nexport function logFromSaga(data: IUser): ILogInAction {\r\n\treturn {\r\n\t\ttype: LOG_IN_SAGA,\r\n\t\tpayload: data\r\n\t};\r\n}\r\n","export const LOG_IN: string = \"LOG_IN\";\r\nexport const SIGN_UP: string = \"SIGN_UP\";\r\nexport const LOG_IN_SAGA: string = \"LOG_IN_SAGA\";\r\nexport const SIGN_UP_SAGA: string = \"SIGN_UP_SAGA\";\r\nexport const LOADED: string = \"LOADED\";\r\n","import {IUser} from \"../interfaces/interface\";\r\nimport {SIGN_UP, SIGN_UP_SAGA} from \"../utils/constants\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface ISignUpAction extends Action<any> {\r\n\tpayload: IUser;\r\n}\r\n\r\nexport function signUp(data: IUser): ISignUpAction {\r\n\treturn {\r\n\t\ttype: SIGN_UP,\r\n\t\tpayload: data\r\n\t};\r\n}\r\n\r\nexport function signFromSaga(data: IUser): ISignUpAction {\r\n\treturn {\r\n\t\ttype: SIGN_UP_SAGA,\r\n\t\tpayload: data\r\n\t};\r\n}\r\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n.use(LanguageDetector).init({\n\tresources: {\n\t\tENG: {\n\t\t\ttranslations: {\n\t\t\t\tlogIn: 'Log in',\n\t\t\t\tsignUp: 'Sign Up',\n\t\t\t\tunRegistered: 'Are you here for the first time?',\n\t\t\t\tregistered: 'Already registration?',\n\t\t\t}\n\t\t},\n\t\tRUS: {\n\t\t\ttranslations: {\n\t\t\t\tlogIn: 'Авторизация',\n\t\t\t\tsignUp: 'Регистрация',\n\t\t\t\tunRegistered: 'Вы здесь в первый раз?',\n\t\t\t\tregistered: 'Уже регистрировались?',\n\t\t\t}\n\t\t},\n\t},\n\tfallbackLng: \"ENG\",\n\n\tns: [\"translations\"],\n\tdefaultNS: \"translations\",\n\n\tinterpolation: {\n\t\tescapeValue: false, // not needed for react!!\n\t},\n});\n\nexport default i18n;\n","import {IState, IUser} from \"../interfaces/interface\";\r\nimport { message } from 'antd';\r\n\r\nexport const getStore = (state:any) =>  state.formReducer\r\n\r\nexport const selectUser = (state: IState, data: IUser) => {\r\n\tconst user = state.users.filter((item:IUser) => ((item.email === data.email) && (item.password === data.password)))\r\n\treturn user\r\n}\r\n\r\nexport const delay = (ms:number) => new Promise(res => setTimeout(res, ms))\r\n\r\nexport const makeSuccessMsg = (): void => {\r\n\tmessage.success('You was register!');\r\n}\r\n\r\nexport const makeErrorMsg = (): void => {\r\n\tmessage.success('Something went wrong');\r\n}\r\n","import { LOG_IN, SIGN_UP } from \"../utils/constants\";\r\nimport { ISignUpAction, signFromSaga } from \"./signUp\";\r\nimport { ILogInAction, logFromSaga } from \"./logIn\";\r\nimport { SagaIterator } from \"@redux-saga/core\";\r\nimport { fork, call, takeEvery, select, put } from \"redux-saga/effects\";\r\nimport { IState, IUser } from \"../interfaces/interface\";\r\nimport {\r\n  delay,\r\n  getStore,\r\n  makeErrorMsg,\r\n  makeSuccessMsg,\r\n  selectUser\r\n} from \"../utils/helpers\";\r\nimport { loaded } from \"./loaded\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction* rootSaga(): SagaIterator {\r\n  yield fork(Saga);\r\n}\r\n\r\nexport default function* Saga() {\r\n  yield takeEvery(LOG_IN, logInSaga);\r\n  yield takeEvery(SIGN_UP, signUpSaga);\r\n}\r\n\r\nexport function* signUpSaga(action: ISignUpAction) {\r\n  const state: IState = yield select(getStore);\r\n\r\n  const sameUser: IUser[] = selectUser(state, action.payload);\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n    if (sameUser.length >= 1) {\r\n      yield call(makeSuccessMsg);\r\n      yield put(loaded());\r\n    } else {\r\n      yield put(signFromSaga(action.payload));\r\n      yield call(makeSuccessMsg);\r\n    }\r\n  } catch (e) {\r\n    yield call(makeErrorMsg);\r\n  }\r\n}\r\n\r\nexport function* logInSaga(action: ILogInAction) {\r\n  const state: IState = yield select(getStore);\r\n\r\n  const user: IUser[] = selectUser(state, action.payload);\r\n\r\n  yield delay(2000);\r\n\r\n  try {\r\n    if (user.length) {\r\n      yield put(logFromSaga(user[0]));\r\n      yield call(makeSuccessMsg);\r\n    } else {\r\n      yield put(loaded());\r\n      yield call(makeErrorMsg);\r\n    }\r\n  } catch (e) {\r\n    yield call(makeErrorMsg);\r\n  }\r\n}\r\n","import {LOADED} from \"../utils/constants\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface  ILoadWithError extends Action<typeof LOADED> {\r\n\tpayload: null;\r\n}\r\n\r\nexport function loaded(): ILoadWithError {\r\n\treturn {\r\n\t\ttype: LOADED,\r\n\t\tpayload: null,\r\n\t};\r\n}\r\n","import { IState } from \"../interfaces/interface\";\r\nimport {LOADED, LOG_IN, LOG_IN_SAGA, SIGN_UP, SIGN_UP_SAGA} from \"../utils/constants\";\r\nimport { ILogInAction } from \"../actions/logIn\";\r\nimport { ISignUpAction } from \"../actions/signUp\";\r\nimport {ILoadWithError} from \"../actions/loaded\";\r\n\r\nconst initialState: IState = {\r\n\tusers: [],\r\n\tisLoaded: true,\r\n}\r\n\r\nexport function formReducer(\r\n\tstate: IState = initialState,\r\n\taction: ILogInAction | ISignUpAction |  ILoadWithError\r\n) {\r\n\tswitch (action.type) {\r\n\t\tcase LOG_IN:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tisLoaded: false,\r\n\t\t\t\t}\r\n\t\tcase LOG_IN_SAGA:\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tisLoaded: true,\r\n\t\t\t\t\tcurrentUser: action.payload,\r\n\t\t\t\t};\r\n\t\tcase SIGN_UP:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoaded: false,\r\n\t\t\t}\r\n\t\tcase SIGN_UP_SAGA:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusers: [ ...state.users, action.payload],\r\n\t\t\t\tisLoaded: true,\r\n\t\t\t\tcurrentUser: action.payload,\r\n\t\t\t};\r\n\t\tcase LOADED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoaded: true,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { formReducer } from \"./authorize\";\r\n\r\nexport default combineReducers({\r\n\tformReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"../actions/action\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(\r\n\trootReducer,\r\n\tapplyMiddleware(sagaMiddleware, logger)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {LogFormContainer} from './components/FormContainer/LogFormContainer';\nimport { LanguageElement } from './components/LanguageContainer/LanguageElement';\nimport { Provider } from 'react-redux';\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from './i18n';\nimport {store} from \"./store/store\";\nimport 'antd/dist/antd.css';\n\n\nrender(\n\t<Provider store={store}>\n\t\t<I18nextProvider i18n={i18n}>\n\t\t\t<LanguageElement />\n\t\t\t<LogFormContainer/>\n\t\t</I18nextProvider>\n\t</Provider>, document.getElementById('root')\n);\n","import React from \"react\";\nimport { Radio } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\nimport { useTranslation } from \"react-i18next\";\nimport { Language } from \"../../interfaces/interface\";\nimport styles from \"./Language.module.css\";\n\nexport const LanguageElement: React.FC<{}> = () => {\n  const { Group, Button } = Radio;\n\n  const { i18n } = useTranslation();\n\n  const onChange = (e: RadioChangeEvent): void => {\n    i18n.changeLanguage(e.target.value);\n  };\n\n  return (\n    <div className={styles.body}>\n      <Group onChange={onChange} defaultValue={Language.ENG} size=\"small\">\n        <Button value={Language.ENG}>{Language.ENG}</Button>\n        <Button value={Language.RUS}>{Language.RUS}</Button>\n      </Group>\n    </div>\n  );\n};\n","import * as React from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport LogForm from \"./LogForm\"\r\nimport {useState} from \"react\";\r\n\r\nexport interface IProps {\r\n\tdispatch: Dispatch<any>;\r\n\tlogin: boolean;\r\n\tsetLogStatus: (login:boolean) => void\r\n}\r\n\r\nexport const LogFormContainer: React.FC<{}> = () => {\r\n\r\n\tconst dispatch: Dispatch = useDispatch();\r\n\r\n\tconst [login,setLogStatus] = useState<boolean>(true);\r\n\r\n\tconst logFormProps:IProps  = {\r\n\t\tdispatch,\r\n\t\tlogin,\r\n\t\tsetLogStatus\r\n\t}\r\n\r\n\treturn (\r\n\t\t<LogForm\r\n\t\t\t{...logFormProps}\r\n\t\t/>\r\n\t);\r\n};\r\n"],"sourceRoot":""}